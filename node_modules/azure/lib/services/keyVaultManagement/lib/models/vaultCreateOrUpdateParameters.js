/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VaultCreateOrUpdateParameters class.
 * @constructor
 * Parameters for creating or updating a vault
 *
 * @member {string} location The supported Azure location where the key vault
 * should be created.
 * 
 * @member {object} [tags] The tags that will be assigned to the key vault.
 * 
 * @member {object} properties Properties of the vault
 * 
 * @member {string} [properties.vaultUri] The URI of the vault for performing
 * operations on keys and secrets.
 * 
 * @member {uuid} [properties.tenantId] The Azure Active Directory tenant ID
 * that should be used for authenticating requests to the key vault.
 * 
 * @member {object} [properties.sku] SKU details
 * 
 * @member {string} [properties.sku.name] SKU name to specify whether the key
 * vault is a standard vault or a premium vault. Possible values include:
 * 'standard', 'premium'
 * 
 * @member {array} [properties.accessPolicies] An array of 0 to 16 identities
 * that have access to the key vault. All identities in the array must use
 * the same tenant ID as the key vault's tenant ID.
 * 
 * @member {boolean} [properties.enabledForDeployment] Property to specify
 * whether Azure Virtual Machines are permitted to retrieve certificates
 * stored as secrets from the key vault.
 * 
 * @member {boolean} [properties.enabledForDiskEncryption] Property to specify
 * whether Azure Disk Encryption is permitted to retrieve secrets from the
 * vault and unwrap keys.
 * 
 * @member {boolean} [properties.enabledForTemplateDeployment] Property to
 * specify whether Azure Resource Manager is permitted to retrieve secrets
 * from the key vault.
 * 
 */
function VaultCreateOrUpdateParameters() {
  VaultCreateOrUpdateParameters['super_'].call(this);
}

util.inherits(VaultCreateOrUpdateParameters, models['BaseResource']);

/**
 * Defines the metadata of VaultCreateOrUpdateParameters
 *
 * @returns {object} metadata of VaultCreateOrUpdateParameters
 *
 */
VaultCreateOrUpdateParameters.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VaultCreateOrUpdateParameters',
    type: {
      name: 'Composite',
      className: 'VaultCreateOrUpdateParameters',
      modelProperties: {
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        properties: {
          required: true,
          serializedName: 'properties',
          defaultValue: {},
          type: {
            name: 'Composite',
            className: 'VaultProperties'
          }
        }
      }
    }
  };
};

module.exports = VaultCreateOrUpdateParameters;
