/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

/**
 * @class
 * Initializes a new instance of the RateCardManagementClient class.
 * @constructor
 *
 * @param {SubscriptionCloudCredentials} credentials Gets subscription
 * credentials which uniquely identify Microsoft Azure subscription. The
 * subscription ID forms part of the URI for every service call.
 *
 * @param {string} [credentials.subscriptionId]
 *
 * @param {string} [baseUri] Gets the URI used as the base for all cloud
 * service requests.
 *
 * @param {Array} filters
*/
function RateCardManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }

    RateCardManagementClient['super_'].call(this, credentials, filters);

    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
        this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
        this.apiVersion = '2015-06-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
        this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
        this.longRunningOperationRetryTimeout = -1;
    }
  }

/**
 * Get price and metadata information for resources used in an Azure subscription
 * (see
 * https://msdn.microsoft.com/en-us/library/azure/mt219004.aspx
 * for more information)
 *
 * @param {dictonary} [filter] When set to true (default), the aggregates
 * are broken down into the instance metadata which is more granular.
 *
 * @param {string} [filter.OfferDurableId] a valid Offer ID code
 * (e.g., MS-AZR-0026P). See Microsoft Azure Offer Details for more
 * information on the list of available Offer IDs, country/region
 * availability, and billing currency. The Offer ID parameter consists of
 * the “MS-AZR-“ prefix, plus the Offer ID number.
 *
 * @param {string} [filter.Currency] currency in which the resource rates
 * need to be provided.
 *
 * @param {string} [filter.Locale]  culture in which the resource metadata
 * needs to be localized.
 *
 * @param {string} [filter.RegionInfo]  2 letter ISO code where the offer
 * was purchased.
 *
 * @param {function} callback
 *
 * @returns {Stream} The response stream.
*/
RateCardManagementClient.prototype.get = function(filter, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (filter.OfferDurableId === null || filter.OfferDurableId === undefined) {
      filter.OfferDurableId = 'MS-AZR-0003p';
    }
    if (filter.Currency === null || filter.Currency === undefined) {
      filter.Currency =  'USD';
    }
    if (filter.Locale === null || filter.Locale === undefined) {
      filter.Locale = 'en-US';
    }
    if (filter.RegionInfo === null || filter.RegionInfo === undefined) {
      filter.RegionInfo = 'US';
    }


    // Construct URL
    var url2 = '';
    url2 = url2 + 'subscriptions/';
    if (this.credentials.subscriptionId !== null && this.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Commerce/RateCard';
    var queryParameters = [];
    queryParameters.push('api-version=2015-06-01-preview');

    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');

    url2 = url2 + '&$filter=OfferDurableId eq \'' + filter.OfferDurableId +
        '\' and Currency eq \'' + filter.Currency + '\' and Locale eq \'' +
        filter.Locale + '\' and RegionInfo eq \'' + filter.RegionInfo + '\'';

    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers

    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
        //console.log(body);
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }

      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
          var responseContent = body;
          result = { rateCards: [] };
          var responseDoc = null;
          if (responseContent) {
              responseDoc = JSON.parse(responseContent);
          }

          if (responseDoc !== null && responseDoc !== undefined) {
              var valueArray = responseDoc['Meters'];
              if (valueArray !== null && valueArray !== undefined) {
                  for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
                      var valueValue = valueArray[loweredIndex1];
                      result.rateCards.push(valueValue);
                  }
              }
          }

        }

        result.statusCode = statusCode;

        return callback(null, result);
    });
};

util.inherits(RateCardManagementClient, Service);

module.exports = RateCardManagementClient;
