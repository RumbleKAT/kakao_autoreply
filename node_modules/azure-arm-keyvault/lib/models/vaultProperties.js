/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VaultProperties class.
 * @constructor
 * Properties of the vault
 *
 * @member {string} [vaultUri] The URI of the vault for performing operations
 * on keys and secrets.
 * 
 * @member {uuid} tenantId The Azure Active Directory tenant ID that should be
 * used for authenticating requests to the key vault.
 * 
 * @member {object} sku SKU details
 * 
 * @member {string} [sku.name] SKU name to specify whether the key vault is a
 * standard vault or a premium vault. Possible values include: 'standard',
 * 'premium'
 * 
 * @member {array} accessPolicies An array of 0 to 16 identities that have
 * access to the key vault. All identities in the array must use the same
 * tenant ID as the key vault's tenant ID.
 * 
 * @member {boolean} [enabledForDeployment] Property to specify whether Azure
 * Virtual Machines are permitted to retrieve certificates stored as secrets
 * from the key vault.
 * 
 * @member {boolean} [enabledForDiskEncryption] Property to specify whether
 * Azure Disk Encryption is permitted to retrieve secrets from the vault and
 * unwrap keys.
 * 
 * @member {boolean} [enabledForTemplateDeployment] Property to specify
 * whether Azure Resource Manager is permitted to retrieve secrets from the
 * key vault.
 * 
 */
function VaultProperties() {
}

/**
 * Defines the metadata of VaultProperties
 *
 * @returns {object} metadata of VaultProperties
 *
 */
VaultProperties.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VaultProperties',
    type: {
      name: 'Composite',
      className: 'VaultProperties',
      modelProperties: {
        vaultUri: {
          required: false,
          serializedName: 'vaultUri',
          type: {
            name: 'String'
          }
        },
        tenantId: {
          required: true,
          serializedName: 'tenantId',
          type: {
            name: 'String'
          }
        },
        sku: {
          required: true,
          serializedName: 'sku',
          defaultValue: {},
          type: {
            name: 'Composite',
            className: 'Sku'
          }
        },
        accessPolicies: {
          required: true,
          serializedName: 'accessPolicies',
          constraints: {
            MaxItems: 16
          },
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'AccessPolicyEntryElementType',
                type: {
                  name: 'Composite',
                  className: 'AccessPolicyEntry'
                }
            }
          }
        },
        enabledForDeployment: {
          required: false,
          serializedName: 'enabledForDeployment',
          type: {
            name: 'Boolean'
          }
        },
        enabledForDiskEncryption: {
          required: false,
          serializedName: 'enabledForDiskEncryption',
          type: {
            name: 'Boolean'
          }
        },
        enabledForTemplateDeployment: {
          required: false,
          serializedName: 'enabledForTemplateDeployment',
          type: {
            name: 'Boolean'
          }
        }
      }
    }
  };
};

module.exports = VaultProperties;
