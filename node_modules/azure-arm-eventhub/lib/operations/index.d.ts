/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface Namespaces {

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscription(callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Creates Updates namespace. Once created, this namespace's resource manifest
     * is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} parameters Parameters supplied to create a Namespace
     * Resource.
     * 
     * @param {string} parameters.location Namespace location.
     * 
     * @param {object} [parameters.sku]
     * 
     * @param {string} [parameters.sku.name] Name of this Sku. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     * 
     * @param {string} parameters.sku.tier The tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     * 
     * @param {number} [parameters.sku.capacity] The eventhub throughput units
     * 
     * @param {object} [parameters.tags] Namespace tags.
     * 
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * Namespace.
     * 
     * @param {string} [parameters.status] State of the namespace. Possible values
     * include: 'Unknown', 'Creating', 'Created', 'Activating', 'Enabling',
     * 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted',
     * 'Removing', 'Removed', 'Failed'
     * 
     * @param {date} [parameters.createdAt] The time the namespace was created.
     * 
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     * 
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform ServiceBus operations.
     * 
     * @param {boolean} [parameters.createACSNamespace] Indicates whether to
     * create ACS namespace.
     * 
     * @param {boolean} [parameters.enabled] Specifies whether this instance is
     * enabled.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Creates Updates namespace. Once created, this namespace's resource manifest
     * is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} parameters Parameters supplied to create a Namespace
     * Resource.
     * 
     * @param {string} parameters.location Namespace location.
     * 
     * @param {object} [parameters.sku]
     * 
     * @param {string} [parameters.sku.name] Name of this Sku. Possible values
     * include: 'Basic', 'Standard', 'Premium'
     * 
     * @param {string} parameters.sku.tier The tier of this particular SKU.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     * 
     * @param {number} [parameters.sku.capacity] The eventhub throughput units
     * 
     * @param {object} [parameters.tags] Namespace tags.
     * 
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * Namespace.
     * 
     * @param {string} [parameters.status] State of the namespace. Possible values
     * include: 'Unknown', 'Creating', 'Created', 'Activating', 'Enabling',
     * 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted',
     * 'Removing', 'Removed', 'Failed'
     * 
     * @param {date} [parameters.createdAt] The time the namespace was created.
     * 
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     * 
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform ServiceBus operations.
     * 
     * @param {boolean} [parameters.createACSNamespace] Indicates whether to
     * create ACS namespace.
     * 
     * @param {boolean} [parameters.enabled] Specifies whether this instance is
     * enabled.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorization rule for a namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName Namespace Aauthorization Rule Name.
     * 
     * @param {object} parameters The shared access authorization rule.
     * 
     * @param {string} [parameters.location] data center location.
     * 
     * @param {string} [parameters.name] Name of the AuthorizationRule.
     * 
     * @param {array} parameters.rights The rights associated with the rule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a namespace authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName Authorization Rule Name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {string} authorizationRuleName Authorization rule name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Primary and Secondary ConnectionStrings to the namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName The authorizationRule name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerats the Primary or Secondary ConnectionStrings to the namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName The authorizationRule name.
     * 
     * @param {object} parameters Parameters supplied to regenerate Auth Rule.
     * 
     * @param {string} [parameters.policykey] Key that needs to be regenerated .
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * EventHubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface EventHubs {

    /**
     * Enumerates the Event Hubs in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.EventHubListResult>): void;

    /**
     * Creates/Updates a new Event Hub as a nested resource within a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {object} parameters Parameters supplied to create a EventHub
     * Resource.
     * 
     * @param {string} parameters.location Location of the resource.
     * 
     * @param {string} [parameters.type] ARM type of the namespace.
     * 
     * @param {string} [parameters.name] Name of the Event Hub.
     * 
     * @param {object} [parameters.properties]
     * 
     * @param {date} [parameters.properties.createdAt] Exact time the Event was
     * created.
     * 
     * @param {number} [parameters.properties.messageRetentionInDays] Number of
     * days to retain the events for this Event Hub.
     * 
     * @param {number} [parameters.properties.partitionCount] Number of partitions
     * created for EventHub.
     * 
     * @param {array} [parameters.properties.partitionIds] Current number of
     * shards on the Event Hub.
     * 
     * @param {string} [parameters.properties.status] Enumerates the possible
     * values for the status of the EventHub. Possible values include: 'Active',
     * 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating',
     * 'Deleting', 'Renaming', 'Unknown'
     * 
     * @param {date} [parameters.properties.updatedAt] The exact time the message
     * has been updated.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, parameters: models.EventHubCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, parameters: models.EventHubCreateOrUpdateParameters, callback: ServiceCallback<models.EventHubResource>): void;

    /**
     * Deletes an Event hub from the specified namespace and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns an Event Hub description for the specified Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubResource>): void;
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.EventHubResource>): void;

    /**
     * Authorization rules for a EventHub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The NameSpace name
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Creates an authorization rule for the specified Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The Event Hub name.
     * 
     * @param {string} authorizationRuleName Aauthorization Rule Name.
     * 
     * @param {object} parameters The shared access authorization rule.
     * 
     * @param {string} [parameters.location] data center location.
     * 
     * @param {string} [parameters.name] Name of the AuthorizationRule.
     * 
     * @param {array} parameters.rights The rights associated with the rule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Authorization rule for a EventHub by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {string} eventHubName The Event Hub name.
     * 
     * @param {string} authorizationRuleName Authorization rule name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a EventHub authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The Eventhub name.
     * 
     * @param {string} authorizationRuleName Authorization Rule Name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the ACS and SAS connection strings for the Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The event hub name.
     * 
     * @param {string} authorizationRuleName The connection string of the
     * namespace for the specified authorizationRule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Regenerates the ACS and SAS connection strings for the Event Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The event hub name.
     * 
     * @param {string} authorizationRuleName The connection string of the EventHub
     * for the specified authorizationRule.
     * 
     * @param {object} parameters Parameters supplied to regenerate Auth Rule.
     * 
     * @param {string} [parameters.policykey] Key that needs to be regenerated .
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, eventHubName: string, authorizationRuleName: string, parameters: models.RegenerateKeysParameters, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Enumerates the Event Hubs in a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.EventHubListResult>): void;

    /**
     * Authorization rules for a EventHub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * ConsumerGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EventHubManagementClient.
 */
export interface ConsumerGroups {

    /**
     * Creates/Updates a consumer group as a nested resource within a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {string} consumerGroupName The Consumer Group name.
     * 
     * @param {object} parameters Parameters supplied to create a Consumer Group
     * Resource.
     * 
     * @param {string} parameters.location Location of the resource.
     * 
     * @param {string} [parameters.type] ARM type of the namespace.
     * 
     * @param {string} [parameters.name] Name of the consumer group.
     * 
     * @param {date} [parameters.createdAt] Exact time the message was created.
     * 
     * @param {string} [parameters.eventHubPath] The path of the event hub.
     * 
     * @param {date} [parameters.updatedAt] The exact time the message has been
     * updated.
     * 
     * @param {string} [parameters.userMetadata] The user metadata.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, parameters: models.ConsumerGroupCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, parameters: models.ConsumerGroupCreateOrUpdateParameters, callback: ServiceCallback<models.ConsumerGroupResource>): void;

    /**
     * Deletes an ConsumerGroup from the specified EventHub and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {string} consumerGroupName The Consumer Group name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns an Consumer Group description for the specified Consumer Group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {string} consumerGroupName The Consumer Group name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupResource>): void;
    get(resourceGroupName: string, namespaceName: string, eventHubName: string, consumerGroupName: string, callback: ServiceCallback<models.ConsumerGroupResource>): void;

    /**
     * Enumerates the consumer groups in a namespace. An empty feed is returned if
     * no consumer group exists in the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} eventHubName The EventHub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(resourceGroupName: string, namespaceName: string, eventHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
    listAll(resourceGroupName: string, namespaceName: string, eventHubName: string, callback: ServiceCallback<models.ConsumerGroupListResult>): void;

    /**
     * Enumerates the consumer groups in a namespace. An empty feed is returned if
     * no consumer group exists in the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.ConsumerGroupListResult>): void;
}
