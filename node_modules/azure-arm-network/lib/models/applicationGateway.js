/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGateway class.
 * @constructor
 * ApplicationGateways resource
 *
 * @member {object} [sku] Sku of application gateway resource
 * 
 * @member {string} [sku.name] Name of application gateway SKU. Possible
 * values include: 'Standard_Small', 'Standard_Medium', 'Standard_Large'
 * 
 * @member {string} [sku.tier] Tier of application gateway. Possible values
 * include: 'Standard'
 * 
 * @member {number} [sku.capacity] Capacity (instance count) of application
 * gateway
 * 
 * @member {object} [sslPolicy] SSL policy of application gateway resource
 * 
 * @member {array} [sslPolicy.disabledSslProtocols] SSL protocols to be
 * disabled on Application Gateway
 * 
 * @member {string} [operationalState] Operational state of application
 * gateway resource. Possible values include: 'Stopped', 'Starting',
 * 'Running', 'Stopping'
 * 
 * @member {array} [gatewayIPConfigurations] Subnets of application gateway
 * resource
 * 
 * @member {array} [authenticationCertificates] Authentication certificates of
 * application gateway resource
 * 
 * @member {array} [sslCertificates] SSL certificates of application gateway
 * resource
 * 
 * @member {array} [frontendIPConfigurations] Frontend IP addresses of
 * application gateway resource
 * 
 * @member {array} [frontendPorts] Frontend ports of application gateway
 * resource
 * 
 * @member {array} [probes] Probes of application gateway resource
 * 
 * @member {array} [backendAddressPools] Backend address pool of application
 * gateway resource
 * 
 * @member {array} [backendHttpSettingsCollection] Backend http settings of
 * application gateway resource
 * 
 * @member {array} [httpListeners] HTTP listeners of application gateway
 * resource
 * 
 * @member {array} [urlPathMaps] URL path map of application gateway resource
 * 
 * @member {array} [requestRoutingRules] Request routing rules of application
 * gateway resource
 * 
 * @member {string} [resourceGuid] Resource guid property of the
 * ApplicationGateway resource
 * 
 * @member {string} [provisioningState] Provisioning state of the
 * ApplicationGateway resource Updating/Deleting/Failed
 * 
 * @member {string} [etag] A unique read-only string that changes whenever the
 * resource is updated
 * 
 */
function ApplicationGateway() {
  ApplicationGateway['super_'].call(this);
}

util.inherits(ApplicationGateway, models['Resource']);

/**
 * Defines the metadata of ApplicationGateway
 *
 * @returns {object} metadata of ApplicationGateway
 *
 */
ApplicationGateway.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGateway',
    type: {
      name: 'Composite',
      className: 'ApplicationGateway',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        sku: {
          required: false,
          serializedName: 'properties.sku',
          type: {
            name: 'Composite',
            className: 'ApplicationGatewaySku'
          }
        },
        sslPolicy: {
          required: false,
          serializedName: 'properties.sslPolicy',
          type: {
            name: 'Composite',
            className: 'ApplicationGatewaySslPolicy'
          }
        },
        operationalState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.operationalState',
          type: {
            name: 'String'
          }
        },
        gatewayIPConfigurations: {
          required: false,
          serializedName: 'properties.gatewayIPConfigurations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayIPConfigurationElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayIPConfiguration'
                }
            }
          }
        },
        authenticationCertificates: {
          required: false,
          serializedName: 'properties.authenticationCertificates',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayAuthenticationCertificateElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayAuthenticationCertificate'
                }
            }
          }
        },
        sslCertificates: {
          required: false,
          serializedName: 'properties.sslCertificates',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewaySslCertificateElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewaySslCertificate'
                }
            }
          }
        },
        frontendIPConfigurations: {
          required: false,
          serializedName: 'properties.frontendIPConfigurations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayFrontendIPConfigurationElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayFrontendIPConfiguration'
                }
            }
          }
        },
        frontendPorts: {
          required: false,
          serializedName: 'properties.frontendPorts',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayFrontendPortElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayFrontendPort'
                }
            }
          }
        },
        probes: {
          required: false,
          serializedName: 'properties.probes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayProbeElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayProbe'
                }
            }
          }
        },
        backendAddressPools: {
          required: false,
          serializedName: 'properties.backendAddressPools',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayBackendAddressPoolElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayBackendAddressPool'
                }
            }
          }
        },
        backendHttpSettingsCollection: {
          required: false,
          serializedName: 'properties.backendHttpSettingsCollection',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayBackendHttpSettingsElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayBackendHttpSettings'
                }
            }
          }
        },
        httpListeners: {
          required: false,
          serializedName: 'properties.httpListeners',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayHttpListenerElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayHttpListener'
                }
            }
          }
        },
        urlPathMaps: {
          required: false,
          serializedName: 'properties.urlPathMaps',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayUrlPathMapElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayUrlPathMap'
                }
            }
          }
        },
        requestRoutingRules: {
          required: false,
          serializedName: 'properties.requestRoutingRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayRequestRoutingRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayRequestRoutingRule'
                }
            }
          }
        },
        resourceGuid: {
          required: false,
          serializedName: 'properties.resourceGuid',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        etag: {
          required: false,
          serializedName: 'etag',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ApplicationGateway;
