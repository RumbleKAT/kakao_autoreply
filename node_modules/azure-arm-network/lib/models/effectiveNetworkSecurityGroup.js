/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the EffectiveNetworkSecurityGroup class.
 * @constructor
 * Effective NetworkSecurityGroup
 *
 * @member {object} [networkSecurityGroup] Gets the id of network security
 * group that is applied
 * 
 * @member {string} [networkSecurityGroup.id] Resource Id
 * 
 * @member {object} [association]
 * 
 * @member {object} [association.subnet] Gets the id of subnet if assigned
 * 
 * @member {string} [association.subnet.id] Resource Id
 * 
 * @member {object} [association.networkInterface] Gets the id of network
 * interface if assigned
 * 
 * @member {string} [association.networkInterface.id] Resource Id
 * 
 * @member {array} [effectiveSecurityRules] Gets collection of effective
 * security rules
 * 
 */
function EffectiveNetworkSecurityGroup() {
}

/**
 * Defines the metadata of EffectiveNetworkSecurityGroup
 *
 * @returns {object} metadata of EffectiveNetworkSecurityGroup
 *
 */
EffectiveNetworkSecurityGroup.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'EffectiveNetworkSecurityGroup',
    type: {
      name: 'Composite',
      className: 'EffectiveNetworkSecurityGroup',
      modelProperties: {
        networkSecurityGroup: {
          required: false,
          serializedName: 'networkSecurityGroup',
          type: {
            name: 'Composite',
            className: 'SubResource'
          }
        },
        association: {
          required: false,
          serializedName: 'association',
          type: {
            name: 'Composite',
            className: 'EffectiveNetworkSecurityGroupAssociation'
          }
        },
        effectiveSecurityRules: {
          required: false,
          serializedName: 'effectiveSecurityRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EffectiveNetworkSecurityRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'EffectiveNetworkSecurityRule'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = EffectiveNetworkSecurityGroup;
